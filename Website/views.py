# Create your views here.

"""
Here we create the page templates for our webpages.
These templates help us to take care of the requests generated by the webpages.
"""


from django.shortcuts import render
"""This module helps us in rendering webpages from the page templates"""

from django.http import HttpResponseRedirect
"""This module helps us in redirecting webpages from the page templates"""

import yfinance as yf
"""
This module provides the data for stocks from yahoo finance.
It provides the data in the form of pandas Dataframe.
"""

import plotly.graph_objects as go
"""This module is used to plot the candlestick chart from the stock data"""



def home(request):
    """
    This template handles the requests generated by the home page of the website.
    """

    return render(request, "home.html", {})


def visual(request):
    """
    This template handles the requests generated by visual page.
    If any value is missing in the form, it generates the warning regarding the same.
    If all details are entered correctly then it shows the chart of selected stock. 
    """
    if request.method == "POST":
        
        stock_name = request.POST.get('stock_name')
        interval_ = request.POST.get('interval')

        if stock_name == "Select Stock":
            # Generates warning if no stock is selected.
            return render(request, "visual.html", {"message" : "Please select a stock"})

        if interval_ == "Select Interval":
            # Generates warning if no interval is selected.
            return render(request, "visual.html", {"message" : "Please select an interval"})


        tick = yf.Ticker(stock_name) # retrieves all data of the given stock

        data = tick.history(start="2021-01-01", interval=interval_) 
        # A pandas Dataframe containing information of stock's performance in the given time interval.

        name = tick.info['longName'] # Retrieves name of the company registered to the corresponding  stock symbol.

        candlestick = go.Candlestick(x=data.index, open=data['Open'], high=data['High'], low=data['Low'], close=data['Close']) # A candlestick object is created with the corresponding input.

        fig = go.Figure(data=[candlestick]).update_layout(xaxis_rangeslider_visible=False, yaxis_title='Price(INR)')
        # A chart object is created and the data is plotted upon it.


        graph = fig.to_html(full_html=False, default_height=600, default_width=850)
        # The object is then converted to html code for the output in the webpage.

        context = {
            'graph': graph,
            'stock': name,
            "message": "For another visualization, please select a stock",
        }

        return render(request, 'visual.html', context)

    else:
        return render(request, "visual.html", {"message":""})


def contact(request):
    """
    This template handles the requests generated by the contact page of the website.
    """

    return render(request, "contact.html", {})